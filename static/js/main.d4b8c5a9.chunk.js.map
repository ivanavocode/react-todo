{"version":3,"sources":["pages/About.js","context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/Loader.js","components/Notes.js","pages/Home.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["About","className","ALertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","event","preventDefault","trim","addNote","then","show","catch","type","placeholder","onChange","e","target","Loader","role","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","date","onClick","Home","loading","fetchNotes","removeNote","useEffect","Navbar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","data-dismiss","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","url","process","FirebaseState","showLoader","a","axios","get","res","Object","keys","data","Date","toJSON","post","console","log","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d4b8c5a9.chunk.js","sourcesContent":["import React, {Fragment} from \"react\";\n\nexport const About = () => (\n  <div className=\"jumbotron\">\n    <div className=\"container\">\n      <h1 className=\"display-4\">Best React app</h1>\n      <p className=\"lead\">Version 1.0.42</p>\n    </div>\n  </div>\n);","import {createContext} from 'react';\n\nexport const ALertContext = createContext();","import {createContext} from 'react';\n\nexport const FirebaseContext = createContext()","import React, { useState, useContext } from 'react';\nimport { ALertContext } from '../context/alert/alertContext';\nimport { FirebaseContext } from '../context/firebase/firebaseContext';\n\nexport const Form = () => {\n    const [value, setValue] = useState('');\n    const alert = useContext(ALertContext);\n    const firebase = useContext(FirebaseContext);\n\n    const submitHandler = event => {\n        event.preventDefault()\n        \n        if (value.trim()) {\n            // ...\n            firebase.addNote(value.trim()).then(() => {\n                alert.show(\"Заметка была создана\", 'success')\n            }).catch(() => {\n                alert.show('Что-то пошло не так', 'danger')\n            })\n            alert.show(' Заметка была создана', ' success')\n            setValue('')\n        }   else {\n            alert.show(' Введите название заметки')\n        }\n    }\n\n    return (\n        <form onSubmit={submitHandler}>\n        <div className=\"form-group\">\n            <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Введите название заметки\"\n                value={value}\n                onChange={e => setValue(e.target.value)}\n            >\n            </input>\n        </div>            \n        </form>\n    )\n}","import React from \"react\";\n\nexport const Loader = () => (\n  <div className=\"text-center\">\n    <div className=\"spinner-border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n);\n","import React, { Fragment } from \"react\";\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\n\nexport const Notes = ({ notes, onRemove }) => (\n  <TransitionGroup component=\"ul\" className=\"list-group\">\n    {notes.map((note) => (\n      <CSSTransition\n        key={note.id}\n        classNames={'note'}\n        timeout={800}\n      >\n      <li \n      className=\"list-group-item note\" \n       key={note.id}>\n        <div>\n          <strong>{note.title}</strong>\n          <small>{note.date}</small>\n        </div>\n        <button type=\"button\" \n        className=\"btn btn-danger btn-sm\"\n        onClick={() => onRemove(note.id)}\n        >\n          &times;\n        </button>\n      </li>\n      </CSSTransition>\n    ))}\n    \n  </TransitionGroup>\n);","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Form } from \"../components/Form\";\nimport { Loader } from \"../components/Loader\";\nimport { Notes } from \"../components/Notes\";\nimport { FirebaseContext } from \"../context/firebase/firebaseContext\";\n\nexport const Home = () => {\n  // const notes = new Array(3).fill('').map((_, i) => ({id: i, title: `Note ${i + 1}`}))\n  const { loading, notes, fetchNotes, removeNote } = useContext(FirebaseContext);\n\n  useEffect(() => {\n    fetchNotes();\n    //eslint-disable-next-line\n  }, []);\n\n  return (\n    <Fragment>\n      <Form />\n      <hr />\n      {loading ? <Loader /> : <Notes notes={notes} onRemove={removeNote} />}\n    </Fragment>\n  );\n};\n","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nexport const Navbar = () => (\n  <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\n    <div className=\"navbar-brand\">\n      NoteApp\n    </div>\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item\">\n        <NavLink className=\"nav-link\" to=\"/\" exact>Home</NavLink>\n      </li>\n      <li className=\"nav-item\">\n        <NavLink className=\"nav-link\" to=\"/about\">Info</NavLink>\n      </li>\n    </ul>\n  </nav>\n)\n","import React, {useContext} from \"react\";\nimport {CSSTransition} from 'react-transition-group';\nimport { ALertContext } from \"../context/alert/alertContext\";\n\nexport const Alert = () => {\nconst {alert, hide} = useContext(ALertContext)\n\n    // if (!alert.visible) {\n    //     return null;\n    // }\n\n  return (\n    <CSSTransition\n      in={alert.visible}\n      timeout={{\n        enter: 500,\n        exit: 350\n      }}\n      classNames={'alert'}\n      mountOnEnter\n      unmountOnExit\n    >\n    <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\n      <strong>Внимание!</strong>\n      &nbsp;{alert.text}\n      <button\n        type=\"button\"\n        className=\"close\"\n        data-dismiss=\"alert\"\n        aria-label=\"Close\"\n        onClick={hide}\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    </CSSTransition>    \n  );\n};\n","import { HIDE_ALERT, SHOW_ALERT } from \"../types\"\n\nconst handlers = {\n    [SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\n    [HIDE_ALERT]: state => ({...state, visible: false}),\n    DEFAULT: state => state\n}\n\nexport const alertReducer = (state, action) => {\n    const handle = handlers[action.type] || handlers.DEFAULT\n    return handle(state, action)\n}","export const SHOW_ALERT = 'SHOW_ALERT'\nexport const HIDE_ALERT = 'HIDE_ALERT'\nexport const SHOW_LOADER = 'SHOW_LOADER'\nexport const ADD_NOTE = 'ADD_NOTE'\nexport const FETCH_NOTES = 'FETCH_NOTES'\nexport const REMOVE_NOTE = 'REMOVE_NOTE'","import React, {useReducer} from \"react\";\nimport { HIDE_ALERT, SHOW_ALERT } from \"../types\";\nimport { ALertContext } from \"./alertContext\";\nimport { alertReducer } from \"./alertReducer\";\n\nexport const AlertState = ({ children }) => {\n  const [state, dispatch] = useReducer(alertReducer, {visible: false});\n\n  const show = (text, type = 'warning') => {\n    dispatch({\n      type: SHOW_ALERT,\n      payload: {text, type}\n    })\n  }\n\n  const hide = () => dispatch({type: HIDE_ALERT})\n\n  return <ALertContext.Provider value={{\n    show, hide,\n    alert: state\n  }}>{children}</ALertContext.Provider>;\n};\n ","import { ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER } from \"../types\"\n//reducer\nconst handlers = {\n    [SHOW_LOADER]: state => ({...state, loading: true}),\n    [ADD_NOTE]: (state, {payload}) => ({...state, notes: [...state.notes, payload]}),\n    [FETCH_NOTES]: (state, {payload}) => ({...state, notes: payload, loading: false}),\n    [REMOVE_NOTE]: (state, {payload}) => ({\n        ...state,\n        notes: state.notes.filter(note => note.id !== payload)\n    }),\n    DEFAULT: state => state\n} \n\nexport const firebaseReducer = (state, action) => {\n    const handle = handlers[action.type] || handlers.DEFAULT\n    return handle(state,action)\n}","import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport { FirebaseContext } from \"./firebaseContext\";\nimport { firebaseReducer } from \"./firebaseReducer\";\nimport { ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER } from \"../types\";\n\nconst url = process.env.REACT_APP_DB_URL;\n\nexport const FirebaseState = ({ children }) => {\n  const initialState = {\n    notes: [],\n    loading: false,\n  };\n  const [state, dispatch] = useReducer(firebaseReducer, initialState);\n\n  const showLoader = () => dispatch({ type: SHOW_LOADER });\n\n  const fetchNotes = async () => {\n    showLoader();\n    const res = await axios.get(`${url}/notes.json`);\n    // console.log('fetchNotes', res.data)\n    const payload = Object.keys(res.data).map(key => {\n      return {\n        ...res.data[key],\n        id: key,\n      };\n    });\n    dispatch({ type: FETCH_NOTES, payload });\n  };\n\n  const addNote = async (title) => {\n    const note = {\n      title,\n      date: new Date().toJSON(),\n    };\n    try {\n      const res = await axios.post(`${url}/notes.json`, note);\n      console.log(\"addNote\", res.data);\n      const payload = {\n        ...note,\n        id: res.data.name,\n      };\n\n      dispatch({\n        type: ADD_NOTE,\n        payload,\n      });\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const removeNote = async (id) => {\n    await axios.delete(`${url}/notes/${id}.json`);\n\n    dispatch({\n      type: REMOVE_NOTE,\n      payload: id,\n    });\n  };\n\n  return (\n    <FirebaseContext.Provider\n      value={{\n        showLoader,\n        addNote,\n        removeNote,\n        fetchNotes,\n        loading: state.loading,\n        notes: state.notes,\n      }}\n    >\n      {children}\n    </FirebaseContext.Provider>\n  );\n};\n","import React from 'react';\nimport {BrowserRouter, Route, Switch}  from  'react-router-dom';\nimport {About} from \"./pages/About\";\nimport {Home} from \"./pages/Home\";\nimport {Navbar} from \"./components/Navbar\";\nimport { Alert } from './components/Alert';\nimport { AlertState } from './context/alert/AlertState';\nimport { FirebaseState } from './context/firebase/FirebaseState';\n\nfunction App() {\n  return (\n    <FirebaseState>\n    <AlertState>\n    <BrowserRouter>\n      <Navbar />\n      <div className=\"container pt-4\">\n        <Alert />\n        <Switch>\n          <Route path={'/'} exact component={Home} />\n          <Route path={'/about'} component={About} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n    </AlertState>\n    </FirebaseState>        \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}